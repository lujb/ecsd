%% Simple Types: atom/string/integer/boolean/any/union
%% Complex Types:list/tuple(fixed list)
%% Expr: oneof/onlywhen
{namespace, "ecsd://rytong.com/conf/err_code"}.
{annotation, [{name, "Error Code Config"},{docstring, "err_code config file"}]}.



{element, [{annotation, [{type, tuple},
                        {name, "app_errors"},
                        {repeat, {1, n}},
                        {value, list}]},
           {element, [{annotation, [{name, "error"},
                                   {type, tuple},
                                   {repeat, {0,n}}]},
                      {element, [{annotation, [{name, "error_code"},{type, string}]}]},
                      {element, [{annotation, [{name, "cust_msg"},{type, string}]}]}
                      ]},
           {element, [{annotation, [{name, "error"},
                                   {type, tuple},
                                   {repeat, {0,n}}]},
                      {element, [{annotation, [{name, "error_code"},{type, string}]}]},
                      {element, [{annotation, [{name, "error_type"},{type, string}]}]},
                      {element, [{annotation, [{name, "cust_msg"},{type, string}]}]},
                      {element, [{annotation, [{name, "dev_msg"},{type, string}]}]},
                      {element, [{annotation, [{name, "handler"},{type, any},
                                              {value, {oneof, [undefined,
                                                               {element, [{annotation, [{type, tuple},
                                                                                       {tag, page},
                                                                                       {value, string}]}]},
                                                               {element, [{annotation, [{type, tuple},
                                                                                       {tag, callback},
                                                                                       {value, tuple}]},
                                                                          {element, [{annotation, [{name, "mod"},
                                                                                                  {type, atom}]}]},
                                                                          {element, [{annotation, [{name, "func"},
                                                                                                  {type, atom}]}]}
                                                                ]}
                                              ]}}]}]}
                      ]}
]}.

